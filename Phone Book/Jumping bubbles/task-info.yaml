type: edu
custom_name: stage2
files:
- name: src/phonebook/Main.kt
  visible: true
  text: |
    package phonebook

    import java.io.File

    class InternalMemory {

        fun directory(): Map<Int, String> {
            var number = 0
            var name = ""
            return File("D://Temp/directory.txt").readLines().associate { it.split(" ").forEachIndexed { i, word ->
                if (i == 0) number = word.toInt()
                if (i == 1) name = word else name += " $word"
            }
            number to name}
        }

        fun find(): List<String> {
            return File("D://Temp/find.txt").readLines().map { it }
        }

    }

    class Search {

        fun stringInMap (data: InternalMemory) {
            val map = data.directory()
            val list = data.find()
            val startTime = System.currentTimeMillis()
            var found = 1
            println("Start searching...")
            map.forEach { (key, value) ->
                list.forEach { if (it == value) found++ }
            }
            val totalTime = System.currentTimeMillis() - startTime
            val min = totalTime / 60000
            val sec = (totalTime % 60000) / 1000
            val ms = (totalTime % 60000) % 1000
            println("Found $found / ${list.size}. Time taken: $min min. $sec sec. $ms ms. ")
        }

    }

    fun main() {
        Search().stringInMap(InternalMemory())
    }
  learner_created: false
- name: test/PhoneBookTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import phonebook.MainKt;

    import java.util.Arrays;
    import java.util.List;

    public class PhoneBookTest extends StageTest {
        public PhoneBookTest() {
            super(MainKt.class);
        }

        @Override
        public List<TestCase> generate() {
            return Arrays.asList(
                new TestCase().setTimeLimit(30 * 60 * 1000)
            );
        }

        @Override
        public CheckResult check(String reply, Object clue) {
            reply = reply.toLowerCase();
            return new CheckResult(
                reply.contains("start searching")
                    && reply.contains("found")
                    && reply.contains("min.")
                    && reply.contains("sec.")
                    && reply.contains("ms.")
                    && reply.contains("sorting time")
                    && reply.contains("searching time")
                    && reply.contains("linear search")
                    && reply.contains("bubble sort")
                    && reply.contains("jump search"));
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/86/stages/477/implement#comment
status: Solved
record: 1
